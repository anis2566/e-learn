generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
  Teacher
}

enum Status {
  Pending
  Active
  Suspended
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkId         String         @unique
  name            String
  email           String
  imageUrl        String
  role            Role           @default(User)

  questions       Question[]
  purchases       Purchase[]
  teacher         Teacher?
  questionReplies QuestionReply[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([clerkId, id])
}

model Teacher {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId

  name            String
  email           String
  phone           String
  imageUrl        String
  bio             String
  experience      Int?
  status          Status         @default(Pending)

  userId          String         @unique @db.ObjectId
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  courses         CourseTeacher[]
  questionReplies QuestionReply[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId, id])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String
  tags        String[] @default([])

  courses     Course[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CourseTeacher {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  teacherId String   @db.ObjectId
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([teacherId, courseId])
}

model Course {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  tags        String[] @default([])

  categoryId  String?  @db.ObjectId
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  purchases   Purchase[]
  questions   Question[]
  teachers    CourseTeacher[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
}

model Chapter {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  videoUrl      String?
  videoThumbnail String?
  videoLength   Int?
  videoPlayer   String?
  position      Int?
  isPublished   Boolean        @default(false)
  isFree        Boolean        @default(false)

  courseId      String         @db.ObjectId
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress  UserProgress[]
  attachments   Attachment[]
  questions     Question[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([courseId])
}

model Attachment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  url         String

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([chapterId])
}

model UserProgress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String

  chapterId   String   @db.ObjectId
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId, userId])
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String

  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId String   @db.ObjectId
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  replies   QuestionReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId, userId, courseId])
}

model QuestionReply {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  reply      String

  teacherId  String?  @db.ObjectId
  teacher    Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
}
