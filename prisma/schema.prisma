// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
  Teacher
}


model User {
  id String @id @default(uuid())
  clerkId String @unique
  name String
  email String
  imageUrl String
  role Role @default(User)

  questions Question[]
  purchases Purchase[]
  teacher Teacher?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([id, clerkId])
}

model Teacher {
  id String @id @default(uuid())

  name String
  email String
  phone String
  imageUrl String
  bio String @db.Text
  experience Int? 

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  courses CourseTeacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, userId])
}

model Category {
  id String @id @default(uuid())
  name String
  description String? @db.Text
  imageUrl String
  tags String[] @default([])

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseTeacher {
  teacherId String
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([teacherId, courseId])
}

model Course {
  id String @id @default(uuid())
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)
  tags String[] @default([])

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  purchases Purchase[]
  questions Question[]
  teachers CourseTeacher[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, categoryId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  videoThumbnail String?
  videoLength Int?
  videoPlayer String?
  position Int?
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  attachments Attachment[]
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId, id])
}

model Attachment {
  id String @id @default(uuid())
  title String
  url String @db.Text

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId, id])
}

model UserProgress {
  id String @id @default(uuid())
  userId String
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId, id])
  @@unique([userId, chapterId])
}


model Purchase {
  id String @id @default(uuid())

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId, id, userId])
}


model Question {
  id         String   @id @default(uuid())
  title String

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapterId  String
  chapter    Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  replies QuestionReply[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chapterId, id, userId, courseId])
}


model QuestionReply {
  id        String   @id @default(uuid())
  reply      String @db.Text

  userName  String
  imageUrl  String

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId, id])
}
